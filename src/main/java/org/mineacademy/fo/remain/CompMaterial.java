package org.mineacademy.fo.remain;

import java.util.HashMap;

import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.mineacademy.fo.Common;
import org.mineacademy.fo.MinecraftVersion;
import org.mineacademy.fo.MinecraftVersion.V;
import org.mineacademy.fo.Valid;
import org.mineacademy.fo.collection.StrictSet;
import org.mineacademy.fo.exception.FoException;

import com.google.common.collect.Sets;

import lombok.Getter;

/**
 * Heavily inspired by a library made by Hex_27.
 *
 * Source:
 * https://www.spigotmc.org/threads/1-8-to-1-13-itemstack-material-version-support.329630/
 */
public enum CompMaterial {

	ACACIA_BOAT("BOAT_ACACIA"),
	ACACIA_BUTTON("WOOD_BUTTON"),
	ACACIA_DOOR("ACACIA_DOOR"),
	ACACIA_FENCE("ACACIA_FENCE"),
	ACACIA_FENCE_GATE("ACACIA_FENCE_GATE"),
	ACACIA_LEAVES("LEAVES_2"),
	ACACIA_LOG("LOG_2"),
	ACACIA_PLANKS("WOOD", 4),
	ACACIA_PRESSURE_PLATE("WOOD_PLATE"),
	ACACIA_SAPLING("SAPLING", 4),
	ACACIA_SLAB("WOOD_STEP", 4),
	ACACIA_STAIRS("ACACIA_STAIRS", 4),
	ACACIA_TRAPDOOR("TRAP_DOOR"),
	ACACIA_WOOD("LOG_2"),
	ACTIVATOR_RAIL("ACTIVATOR_RAIL"),
	AIR("AIR"),
	ALLIUM("STONE"),
	ANDESITE("STONE", 5),
	ANVIL("ANVIL"),
	APPLE("APPLE"),
	ARMOR_STAND("ARMOR_STAND"),
	ARROW("ARROW"),
	ATTACHED_MELON_STEM("MELON_STEM", 7),
	ATTACHED_PUMPKIN_STEM("PUMPKIN_STEM", 7),
	AZURE_BLUET("RED_ROSE", 3),
	BAKED_POTATO("BAKED_POTATO"),
	BARRIER("BARRIER", "STONE", 0),
	BAT_SPAWN_EGG("MONSTER_EGG", 65),
	BEACON("BEACON"),
	BEDROCK("BEDROCK"),
	BEEF("RAW_BEEF"),
	BEETROOT("BEETROOT"),
	BEETROOTS("BEETROOT"),
	BEETROOT_SEEDS("BEETROOT_SEEDS"),
	BEETROOT_SOUP("BEETROOT_SOUP"),
	BIRCH_BOAT("BOAT_BIRCH"),
	BIRCH_BUTTON("WOOD_BUTTON"),
	BIRCH_DOOR("BIRCH_DOOR"),
	BIRCH_FENCE("BIRCH_FENCE"),
	BIRCH_FENCE_GATE("BIRCH_FENCE_GATE"),
	BIRCH_LEAVES("LEAVES", 2),
	BIRCH_LOG("LOG", 2),
	BIRCH_PLANKS("WOOD", 2),
	BIRCH_PRESSURE_PLATE("WOOD_PLATE"),
	BIRCH_SAPLING("SAPLING", 2),
	BIRCH_SLAB("WOOD_STEP", 2),
	BIRCH_STAIRS("BIRCH_WOOD_STAIRS"),
	BIRCH_TRAPDOOR("TRAP_DOOR"),
	BIRCH_WOOD("LOG", 2),
	BLACK_BANNER("BANNER"),
	BLACK_BED("BED", 15),
	BLACK_CARPET("CARPET", 15),
	BLACK_CONCRETE("CONCRETE", 15),
	BLACK_CONCRETE_POWDER("CONCRETE_POWDER", 15),
	BLACK_GLAZED_TERRACOTTA("BLACK_GLAZED_TERRACOTTA"),
	BLACK_SHULKER_BOX("BLACK_SHULKER_BOX"),
	BLACK_STAINED_GLASS("STAINED_GLASS", 15),
	BLACK_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 15),
	BLACK_TERRACOTTA("STAINED_CLAY", 15),
	BLACK_WALL_BANNER("WALL_BANNER"),
	BLACK_WOOL("WOOL", 15),
	BLAZE_POWDER("BLAZE_POWDER"),
	BLAZE_ROD("BLAZE_ROD"),
	BLAZE_SPAWN_EGG("MONSTER_EGG", 61),
	BLUE_BANNER("BANNER", 11),
	BLUE_BED("BED", 4),
	BLUE_CARPET("CARPET", 11),
	BLUE_CONCRETE("CONCRETE", 11),
	BLUE_CONCRETE_POWDER("CONCRETE_POWDER", 11),
	BLUE_GLAZED_TERRACOTTA("BLUE_GLAZED_TERRACOTTA"),
	BLUE_ICE("PACKED_ICE"),
	BLUE_ORCHID("RED_ROSE", 1),
	BLUE_SHULKER_BOX("BLUE_SHULKER_BOX"),
	BLUE_STAINED_GLASS("STAINED_GLASS", 11),
	BLUE_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 11),
	BLUE_TERRACOTTA("STAINED_CLAY", 11),
	BLUE_WALL_BANNER("WALL_BANNER", 11),
	BLUE_WOOL("WOOL", 11),
	BONE("BONE"),
	BONE_BLOCK("BONE_BLOCK"),
	BONE_MEAL("INK_SACK", 15),
	BOOK("BOOK"),
	BOOKSHELF("BOOKSHELF"),
	BOW("BOW"),
	BOWL("BOWL"),
	BRAIN_CORAL("STONE"),
	BRAIN_CORAL_BLOCK("STONE"),
	BRAIN_CORAL_FAN("STONE"),
	BREAD("BREAD"),
	/**
	 * @deprecated use {@link #BREWING_STAND_ITEM}
	 */
	BREWING_STAND("BREWING_STAND"),
	BREWING_STAND_ITEM("BREWING_STAND"),
	BRICK("CLAY_BRICK"),
	BRICKS("BRICK"),
	BRICK_SLAB("STEP", 4),
	BRICK_STAIRS("BRICK_STAIRS"),
	BROWN_BANNER("BANNER", 3),
	BROWN_BED("BED", 12),
	BROWN_CARPET("CARPET", 12),
	BROWN_CONCRETE("CONCRETE", 12),
	BROWN_CONCRETE_POWDER("CONCRETE_POWDER", 12),
	BROWN_GLAZED_TERRACOTTA("BROWN_GLAZED_TERRACOTTA"),
	BROWN_MUSHROOM("BROWN_MUSHROOM"),
	BROWN_MUSHROOM_BLOCK("BROWN_MUSHROOM"), // UNSURE
	BROWN_SHULKER_BOX("BROWN_SHULKER_BOX"),
	BROWN_STAINED_GLASS("STAINED_GLASS", 12),
	BROWN_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 12),
	BROWN_TERRACOTTA("STAINED_CLAY", 12),
	BROWN_WALL_BANNER("WALL_BANNER", 3),
	BROWN_WOOL("WOOL", 12),
	BUBBLE_COLUMN("STONE"),
	BUBBLE_CORAL("STONE"),
	BUBBLE_CORAL_BLOCK("STONE"),
	BUBBLE_CORAL_FAN("STONE"),
	BUCKET("BUCKET"),
	CACTUS("CACTUS"),
	CAKE("CAKE"),
	CARROT("CARROT"),
	CARROTS("CARROT"),
	CARROT_ON_A_STICK("CARROT_STICK"),
	CARVED_PUMPKIN("PUMPKIN"),
	CAULDRON("CAULDRON"),
	CAVE_AIR("AIR"),
	CAVE_SPIDER_SPAWN_EGG("MONSTER_EGG", 59),
	CHAINMAIL_BOOTS("CHAINMAIL_BOOTS"),
	CHAINMAIL_CHESTPLATE("CHAINMAIL_CHESTPLATE"),
	CHAINMAIL_HELMET("CHAINMAIL_HELMET"),
	CHAINMAIL_LEGGINGS("CHAINMAIL_LEGGINGS"),
	CHAIN_COMMAND_BLOCK("COMMAND_CHAIN"),
	CHARCOAL("COAL", 1),
	CHEST("CHEST"),
	CHEST_MINECART("STORAGE_MINECART"),
	CHICKEN("RAW_CHICKEN"),
	CHICKEN_SPAWN_EGG("MONSTER_EGG", 93),
	CHIPPED_ANVIL("ANVIL", 1),
	CHISELED_QUARTZ_BLOCK("QUARTZ_BLOCK", 1),
	CHISELED_RED_SANDSTONE("RED_SANDSTONE", 1),
	CHISELED_SANDSTONE("SANDSTONE", 1),
	CHISELED_STONE_BRICKS("SMOOTH_BRICK", 3),
	CHORUS_FLOWER("CHORUS_FLOWER"),
	CHORUS_FRUIT("CHORUS_FRUIT"),
	CHORUS_PLANT("CHORUS_PLANT"),
	CLAY("CLAY"),
	CLAY_BALL("CLAY_BALL"),
	CLOCK("WATCH"),
	COAL("COAL"),
	COAL_BLOCK("COAL_BLOCK"),
	COAL_ORE("COAL_ORE"),
	COARSE_DIRT("DIRT", 1),
	COBBLESTONE("COBBLESTONE"),
	COBBLESTONE_SLAB("STEP", 3),
	COBBLESTONE_STAIRS("COBBLESTONE_STAIRS"),
	COBBLESTONE_WALL("COBBLE_WALL"),
	COBWEB("WEB"),
	COCOA("COCOA"),
	COCOA_BEANS("INK_SACK", 3),
	COD("RAW_FISH"),
	COD_BUCKET("BUCKET"),
	COD_SPAWN_EGG("MONSTER_EGG"),
	COMMAND_BLOCK("COMMAND"),
	COMMAND_BLOCK_MINECART("COMMAND_MINECART"),
	COMPARATOR("REDSTONE_COMPARATOR"),
	COMPASS("COMPASS"),
	CONDUIT("STONE"),
	COOKED_BEEF("COOKED_BEEF"),
	COOKED_CHICKEN("COOKED_CHICKEN"),
	COOKED_COD("COOKED_FISH"),
	COOKED_MUTTON("COOKED_MUTTON"),
	COOKED_PORKCHOP("GRILLED_PORK"),
	COOKED_RABBIT("COOKED_RABBIT"),
	COOKED_SALMON("COOKED_FISH", 1),
	COOKIE("COOKIE"),
	COW_SPAWN_EGG("MONSTER_EGG", 92),
	CRACKED_STONE_BRICKS("SMOOTH_BRICK", 2),
	CRAFTING_TABLE("WORKBENCH"),
	CREEPER_HEAD("SKULL_ITEM",4),
	CREEPER_SPAWN_EGG("MONSTER_EGG", 50),
	CREEPER_WALL_HEAD("SKULL"),
	CUT_RED_SANDSTONE("STONE"),
	CUT_SANDSTONE("STONE"),
	CYAN_BANNER("BANNER", 6),
	CYAN_BED("BED", 9),
	CYAN_CARPET("CARPET", 9),
	CYAN_CONCRETE("CONCRETE", 9),
	CYAN_CONCRETE_POWDER("CONCRETE_POWDER", 9),
	CYAN_DYE("INK_SACK", 6),
	CYAN_GLAZED_TERRACOTTA("CYAN_GLAZED_TERRACOTTA"),
	CYAN_SHULKER_BOX("CYAN_SHULKER_BOX"),
	CYAN_STAINED_GLASS("STAINED_GLASS", 9),
	CYAN_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 9),
	CYAN_TERRACOTTA("STAINED_CLAY", 9),
	CYAN_WALL_BANNER("WALL_BANNER"),
	CYAN_WOOL("WOOL", 9),
	DAMAGED_ANVIL("ANVIL", 2),
	DANDELION("YELLOW_FLOWER"),
	/**
	 * @deprecated Use yellow dye
	 */
	@Deprecated
	DANDELION_YELLOW("INK_SACK", "YELLOW_DYE", 11),
	YELLOW_DYE("INK_SACK", "DANDELION_YELLOW", 11),
	DARK_OAK_BOAT("BOAT_DARK_OAK"),
	DARK_OAK_BUTTON("WOOD_BUTTON"),
	DARK_OAK_DOOR("DARK_OAK_DOOR"),
	DARK_OAK_FENCE("DARK_OAK_FENCE"),
	DARK_OAK_FENCE_GATE("DARK_OAK_FENCE_GATE"),
	DARK_OAK_LEAVES("LEAVES_2", 1),
	DARK_OAK_LOG("LOG_2", 1),
	DARK_OAK_PLANKS("WOOD", 5),
	DARK_OAK_PRESSURE_PLATE("WOOD_PLATE"),
	DARK_OAK_SAPLING("SAPLING", 5),
	DARK_OAK_SLAB("WOOD_STEP"),
	DARK_OAK_STAIRS("DARK_OAK_STAIRS"),
	DARK_OAK_TRAPDOOR("TRAP_DOOR"),
	DARK_OAK_WOOD("LOG_2", 1),
	DARK_PRISMARINE("PRISMARINE", 2),
	DARK_PRISMARINE_SLAB("STONE"),
	DARK_PRISMARINE_STAIRS("STONE"),
	DAYLIGHT_DETECTOR("DAYLIGHT_DETECTOR"),
	DEAD_BRAIN_CORAL_BLOCK("STONE"),
	DEAD_BUBBLE_CORAL_BLOCK("STONE"),
	DEAD_BUSH("DEAD_BUSH"),
	DEAD_FIRE_CORAL_BLOCK("STONE"),
	DEAD_HORN_CORAL_BLOCK("STONE"),
	DEAD_TUBE_CORAL_BLOCK("STONE"),
	DEBUG_STICK("STICK"),
	DETECTOR_RAIL("DETECTOR_RAIL"),
	DIAMOND("DIAMOND"),
	DIAMOND_AXE("DIAMOND_AXE"),
	DIAMOND_BLOCK("DIAMOND_BLOCK"),
	DIAMOND_BOOTS("DIAMOND_BOOTS"),
	DIAMOND_CHESTPLATE("DIAMOND_CHESTPLATE"),
	DIAMOND_HELMET("DIAMOND_HELMET"),
	DIAMOND_HOE("DIAMOND_HOE"),
	DIAMOND_HORSE_ARMOR("DIAMOND_BARDING"),
	DIAMOND_LEGGINGS("DIAMOND_LEGGINGS"),
	DIAMOND_ORE("DIAMOND_ORE"),
	DIAMOND_PICKAXE("DIAMOND_PICKAXE"),
	DIAMOND_SHOVEL("DIAMOND_SPADE"),
	DIAMOND_SWORD("DIAMOND_SWORD"),
	DIORITE("STONE", 3),
	DIRT("DIRT"),
	DISPENSER("DISPENSER"),
	DOLPHIN_SPAWN_EGG("MONSTER_EGG"),
	DONKEY_SPAWN_EGG("MONSTER_EGG"),
	DRAGON_BREATH("DRAGONS_BREATH"),
	DRAGON_EGG("DRAGON_EGG"),
	DRAGON_HEAD("SKULL_ITEM", 5),
	DRAGON_WALL_HEAD("SKULL"),
	DRIED_KELP("STONE"),
	DRIED_KELP_BLOCK("STONE"),
	DROPPER("DROPPER"),
	DROWNED_SPAWN_EGG("MONSTER_EGG"),
	EGG("EGG"),
	ELDER_GUARDIAN_SPAWN_EGG("MONSTER_EGG"),
	ELYTRA("ELYTRA"),
	EMERALD("EMERALD"),
	EMERALD_BLOCK("EMERALD_BLOCK"),
	EMERALD_ORE("EMERALD_ORE"),
	ENCHANTED_BOOK("ENCHANTED_BOOK"),
	ENCHANTED_GOLDEN_APPLE("GOLDEN_APPLE", 1),
	ENCHANTING_TABLE("ENCHANTMENT_TABLE"),
	ENDERMAN_SPAWN_EGG("MONSTER_EGG", 58),
	ENDERMITE_SPAWN_EGG("MONSTER_EGG", 67),
	ENDER_CHEST("ENDER_CHEST"),
	ENDER_EYE("EYE_OF_ENDER"),
	ENDER_PEARL("ENDER_PEARL"),
	END_CRYSTAL("END_CRYSTAL", "EYE_OF_ENDER", 0),
	END_GATEWAY("END_GATEWAY"),
	END_PORTAL("ENDER_PORTAL"),
	END_PORTAL_FRAME("ENDER_PORTAL_FRAME"),
	END_ROD("END_ROD"),
	END_STONE("ENDER_STONE"),
	END_STONE_BRICKS("END_BRICKS"),
	EVOKER_SPAWN_EGG("MONSTER_EGG"),
	EXPERIENCE_BOTTLE("EXP_BOTTLE"),
	FARMLAND("SOIL"),
	FEATHER("FEATHER"),
	FERMENTED_SPIDER_EYE("FERMENTED_SPIDER_EYE"),
	FERN("LONG_GRASS", 2),
	FILLED_MAP("MAP"),
	FIRE("FIRE"),
	FIREWORK_ROCKET("FIREWORK"),
	FIREWORK_STAR("FIREWORK_CHARGE"),
	FIRE_CHARGE("FIREBALL"),
	FIRE_CORAL("STONE"),
	FIRE_CORAL_BLOCK("STONE"),
	FIRE_CORAL_FAN("STONE"),
	FISHING_ROD("FISHING_ROD"),
	FLINT("FLINT"),
	FLINT_AND_STEEL("FLINT_AND_STEEL"),
	FLOWER_POT("FLOWER_POT"),
	FROSTED_ICE("FROSTED_ICE"),
	FURNACE("FURNACE", "BURNING_FURNACE", 0),
	FURNACE_MINECART("POWERED_MINECART"),
	GHAST_SPAWN_EGG("MONSTER_EGG", 56),
	GHAST_TEAR("GHAST_TEAR"),
	GLASS("GLASS"),
	GLASS_BOTTLE("GLASS_BOTTLE"),
	GLASS_PANE("THIN_GLASS"),
	GLISTERING_MELON_SLICE("SPECKLED_MELON"),
	GLOWSTONE("GLOWSTONE"),
	GLOWSTONE_DUST("GLOWSTONE_DUST"),
	GOLDEN_APPLE("GOLDEN_APPLE"),
	GOLDEN_AXE("GOLD_AXE"),
	GOLDEN_BOOTS("GOLD_BOOTS"),
	GOLDEN_CARROT("GOLDEN_CARROT"),
	GOLDEN_CHESTPLATE("GOLD_CHESTPLATE"),
	GOLDEN_HELMET("GOLD_HELMET"),
	GOLDEN_HOE("GOLD_HOE"),
	GOLDEN_HORSE_ARMOR("GOLD_BARDING"),
	GOLDEN_LEGGINGS("GOLD_LEGGINGS"),
	GOLDEN_PICKAXE("GOLD_PICKAXE"),
	GOLDEN_SHOVEL("GOLD_SPADE"),
	GOLDEN_SWORD("GOLD_SWORD"),
	GOLD_BLOCK("GOLD_BLOCK"),
	GOLD_INGOT("GOLD_INGOT"),
	GOLD_NUGGET("GOLD_NUGGET"),
	GOLD_ORE("GOLD_ORE"),
	GRANITE("STONE", 1),
	GRASS("GRASS"),
	GRASS_BLOCK("GRASS"),
	GRASS_PATH("GRASS_PATH"),
	GRAVEL("GRAVEL"),
	GRAY_BANNER("BANNER", 8),
	GRAY_BED("BED", 7),
	GRAY_CARPET("CARPET", 7),
	GRAY_CONCRETE("CONCRETE", 7),
	GRAY_CONCRETE_POWDER("CONCRETE_POWDER", 7),
	GRAY_DYE("INK_SACK", 8),
	GRAY_GLAZED_TERRACOTTA("GRAY_GLAZED_TERRACOTTA"),
	GRAY_SHULKER_BOX("GRAY_SHULKER_BOX"),
	GRAY_STAINED_GLASS("STAINED_GLASS", 8),
	GRAY_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 7),
	GRAY_TERRACOTTA("STAINED_CLAY", 8),
	GRAY_WALL_BANNER("WALL_BANNER"),
	GRAY_WOOL("WOOL", 7),
	GREEN_BANNER("BANNER", 2),
	GREEN_BED("BED", 13),
	GREEN_CARPET("CARPET", 13),
	GREEN_CONCRETE("CONCRETE", 13),
	GREEN_CONCRETE_POWDER("CONCRETE_POWDER", 13),
	GREEN_GLAZED_TERRACOTTA("GREEN_GLAZED_TERRACOTTA"),
	GREEN_SHULKER_BOX("GREEN_SHULKER_BOX"),
	GREEN_STAINED_GLASS("STAINED_GLASS", 13),
	GREEN_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 13),
	GREEN_TERRACOTTA("STAINED_CLAY", 13),
	GREEN_WALL_BANNER("WALL_BANNER"),
	GREEN_WOOL("WOOL", 13),
	GUARDIAN_SPAWN_EGG("MONSTER_EGG", 68),
	GUNPOWDER("SULPHUR"),
	HAY_BLOCK("HAY_BLOCK"),
	HEART_OF_THE_SEA("STONE"),
	HEAVY_WEIGHTED_PRESSURE_PLATE("IRON_PLATE"),
	HOPPER("HOPPER"),
	HOPPER_MINECART("HOPPER_MINECART"),
	HORN_CORAL("STONE"),
	HORN_CORAL_BLOCK("STONE"),
	HORN_CORAL_FAN("STONE"),
	HORSE_SPAWN_EGG("MONSTER_EGG", 100),
	HUSK_SPAWN_EGG("MONSTER_EGG"),
	ICE("ICE"),
	INFESTED_CHISELED_STONE_BRICKS("MONSTER_EGGS", 5),
	INFESTED_COBBLESTONE("MONSTER_EGGS", 1),
	INFESTED_CRACKED_STONE_BRICKS("MONSTER_EGGS", 4),
	INFESTED_MOSSY_STONE_BRICKS("MONSTER_EGGS", 3),
	INFESTED_STONE("MONSTER_EGGS"),
	INFESTED_STONE_BRICKS("MONSTER_EGGS", 2),
	INK_SAC("INK_SACK"),
	IRON_AXE("IRON_AXE"),
	IRON_BARS("IRON_FENCE"),
	IRON_BLOCK("IRON_BLOCK"),
	IRON_BOOTS("IRON_BOOTS"),
	IRON_CHESTPLATE("IRON_CHESTPLATE"),
	IRON_DOOR("IRON_DOOR"),
	IRON_HELMET("IRON_HELMET"),
	IRON_HOE("IRON_HOE"),
	IRON_HORSE_ARMOR("IRON_BARDING"),
	IRON_INGOT("IRON_INGOT"),
	IRON_LEGGINGS("IRON_LEGGINGS"),
	IRON_NUGGET("IRON_NUGGET"),
	IRON_ORE("IRON_ORE"),
	IRON_PICKAXE("IRON_PICKAXE"),
	IRON_SHOVEL("IRON_SPADE"),
	IRON_SWORD("IRON_SWORD"),
	IRON_TRAPDOOR("IRON_TRAPDOOR"),
	ITEM_FRAME("ITEM_FRAME"),
	JACK_O_LANTERN("JACK_O_LANTERN"),
	JUKEBOX("JUKEBOX"),
	JUNGLE_BOAT("BOAT_JUNGLE"),
	JUNGLE_BUTTON("WOOD_BUTTON"),
	JUNGLE_DOOR("JUNGLE_DOOR"),
	JUNGLE_FENCE("JUNGLE_FENCE"),
	JUNGLE_FENCE_GATE("JUNGLE_FENCE_GATE"),
	JUNGLE_LEAVES("LEAVES", 3),
	JUNGLE_LOG("LOG", 3),
	JUNGLE_PLANKS("WOOD", 3),
	JUNGLE_PRESSURE_PLATE("WOOD_PLATE"),
	JUNGLE_SAPLING("SAPLING", 3),
	JUNGLE_SLAB("WOOD_STEP", 3),
	JUNGLE_STAIRS("JUNGLE_WOOD_STAIRS"),
	JUNGLE_TRAPDOOR("TRAP_DOOR"),
	JUNGLE_WOOD("LOG", 3),
	KELP("STONE"),
	KELP_PLANT("STONE"),
	KNOWLEDGE_BOOK("KNOWLEDGE_BOOK"),
	LADDER("LADDER"),
	LAPIS_BLOCK("LAPIS_BLOCK"),
	LAPIS_LAZULI("INK_SACK", 4),
	LAPIS_ORE("LAPIS_ORE"),
	LARGE_FERN("DOUBLE_PLANT", 3),
	LAVA("LAVA", "STATIONARY_LAVA", 0),
	LAVA_BUCKET("LAVA_BUCKET"),
	LEAD("LEASH"),
	LEATHER("LEATHER"),
	LEATHER_BOOTS("LEATHER_BOOTS"),
	LEATHER_CHESTPLATE("LEATHER_CHESTPLATE"),
	LEATHER_HELMET("LEATHER_HELMET"),
	LEATHER_LEGGINGS("LEATHER_LEGGINGS"),
	LEVER("LEVER"),
	LIGHT_BLUE_BANNER("BANNER", 12),
	LIGHT_BLUE_BED("BED", 3),
	LIGHT_BLUE_CARPET("CARPET", 3),
	LIGHT_BLUE_CONCRETE("CONCRETE", 3),
	LIGHT_BLUE_CONCRETE_POWDER("CONCRETE_POWDER", 3),
	LIGHT_BLUE_DYE("INK_SACK", 12),
	LIGHT_BLUE_GLAZED_TERRACOTTA("LIGHT_BLUE_GLAZED_TERRACOTTA"),
	LIGHT_BLUE_SHULKER_BOX("LIGHT_BLUE_SHULKER_BOX"),
	LIGHT_BLUE_STAINED_GLASS("STAINED_GLASS", 3),
	LIGHT_BLUE_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 3),
	LIGHT_BLUE_TERRACOTTA("STAINED_CLAY", 3),
	LIGHT_BLUE_WALL_BANNER("BANNER"),
	LIGHT_BLUE_WOOL("WOOL", 3),
	LIGHT_GRAY_BANNER("BANNER", 7),
	LIGHT_GRAY_BED("BED", 8),
	LIGHT_GRAY_CARPET("CARPET", 8),
	LIGHT_GRAY_CONCRETE("CONCRETE", 8),
	LIGHT_GRAY_CONCRETE_POWDER("CONCRETE_POWDER", 8),
	LIGHT_GRAY_DYE("INK_SACK", 7),
	LIGHT_GRAY_GLAZED_TERRACOTTA("SILVER_GLAZED_TERRACOTTA"),
	LIGHT_GRAY_SHULKER_BOX("SILVER_SHULKER_BOX"),
	LIGHT_GRAY_STAINED_GLASS("STAINED_GLASS", 8),
	LIGHT_GRAY_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 8),
	LIGHT_GRAY_TERRACOTTA("STAINED_CLAY", 8),
	LIGHT_GRAY_WALL_BANNER("WALL_BANNER"),
	LIGHT_GRAY_WOOL("WOOL", 8),
	LIGHT_WEIGHTED_PRESSURE_PLATE("GOLD_PLATE"),
	LILAC("DOUBLE_PLANT", 1),
	LILY_PAD("WATER_LILY"),
	LIME_BANNER("BANNER", 10),
	LIME_BED("BED", 5),
	LIME_CARPET("CARPET", 5),
	LIME_CONCRETE("CONCRETE", 5),
	LIME_CONCRETE_POWDER("CONCRETE_POWDER", 5),
	LIME_DYE("INK_SACK", 10),
	LIME_GLAZED_TERRACOTTA("LIME_GLAZED_TERRACOTTA"),
	LIME_SHULKER_BOX("LIME_STAINED_GLASS", "STAINED_GLASS", 5),
	LIME_STAINED_GLASS("STAINED_GLASS", 5),
	LIME_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 5),
	LIME_TERRACOTTA("STAINED_CLAY", 5),
	LIME_WALL_BANNER("WALL_BANNER"),
	LIME_WOOL("WOOL", 5),
	LINGERING_POTION("LINGERING_POTION"),
	LLAMA_SPAWN_EGG("MONSTER_EGG"),
	MAGENTA_BANNER("BANNER", 13),
	MAGENTA_BED("BED", 2),
	MAGENTA_CARPET("CARPET", 2),
	MAGENTA_CONCRETE("CONCRETE", 2),
	MAGENTA_CONCRETE_POWDER("CONCRETE_POWDER", 2),
	MAGENTA_DYE("INK_SACK", 13),
	MAGENTA_GLAZED_TERRACOTTA("MAGENTA_GLAZED_TERRACOTTA"),
	MAGENTA_SHULKER_BOX("MAGENTA_SHULKER_BOX"),
	MAGENTA_STAINED_GLASS("STAINED_GLASS", 2),
	MAGENTA_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 2),
	MAGENTA_TERRACOTTA("STAINED_CLAY", 2),
	MAGENTA_WALL_BANNER("WALL_BANNER"),
	MAGENTA_WOOL("WOOL", 2),
	MAGMA_BLOCK("MAGMA"),
	MAGMA_CREAM("MAGMA_CREAM"),
	MAGMA_CUBE_SPAWN_EGG("MONSTER_EGG", 62),
	MAP("EMPTY_MAP"),
	MELON("MELON"),
	MELON_SEEDS("MELON_SEEDS"),
	MELON_SLICE("MELON"),
	MELON_STEM("MELON_STEM"),
	MILK_BUCKET("MILK_BUCKET"),
	MINECART("MINECART"),
	MOOSHROOM_SPAWN_EGG("MONSTER_EGG", 96),
	MOSSY_COBBLESTONE("MOSSY_COBBLESTONE"),
	MOSSY_COBBLESTONE_WALL("COBBLE_WALL", 1),
	MOSSY_STONE_BRICKS("SMOOTH_BRICK", 1),
	MOVING_PISTON("PISTON_MOVING_PIECE"),
	MULE_SPAWN_EGG("MONSTER_EGG"),
	MUSHROOM_STEM("BROWN_MUSHROOM"),
	MUSHROOM_STEW("MUSHROOM_SOUP"),
	MUSIC_DISC_11("GOLD_RECORD"),
	MUSIC_DISC_13("GREEN_RECORD"),
	MUSIC_DISC_BLOCKS("RECORD_3"),
	MUSIC_DISC_CAT("RECORD_4"),
	MUSIC_DISC_CHIRP("RECORD_5"),
	MUSIC_DISC_FAR("RECORD_6"),
	MUSIC_DISC_MALL("RECORD_7"),
	MUSIC_DISC_MELLOHI("RECORD_8"),
	MUSIC_DISC_STAL("RECORD_9"),
	MUSIC_DISC_STRAD("RECORD_10"),
	MUSIC_DISC_WAIT("RECORD_11"),
	MUSIC_DISC_WARD("RECORD_12"),
	MUTTON("MUTTON"),
	MYCELIUM("MYCEL"),
	NAME_TAG("NAME_TAG"),
	NAUTILUS_SHELL("STONE"),
	NETHERRACK("NETHERRACK"),
	NETHER_BRICK("NETHER_BRICK"),
	NETHER_BRICKS("NETHER_BRICK"),
	NETHER_BRICK_FENCE("NETHER_FENCE"),
	NETHER_BRICK_SLAB("STEP", 6),
	NETHER_BRICK_STAIRS("NETHER_BRICK_STAIRS"),
	NETHER_PORTAL("PORTAL"),
	NETHER_QUARTZ_ORE("QUARTZ_ORE"),
	NETHER_STAR("NETHER_STAR"),
	NETHER_WART("NETHER_STALK"),
	NETHER_WART_BLOCK("NETHER_WART_BLOCK"),
	NOTE_BLOCK("NOTE_BLOCK"),
	OAK_BOAT("BOAT"),
	OAK_BUTTON("WOOD_BUTTON"),
	OAK_DOOR("WOOD_DOOR"),
	OAK_FENCE("FENCE"),
	OAK_FENCE_GATE("FENCE_GATE"),
	OAK_LEAVES("LEAVES"),
	OAK_LOG("LOG"),
	OAK_PLANKS("WOOD"),
	OAK_PRESSURE_PLATE("WOOD_PLATE"),
	OAK_SAPLING("SAPLING"),
	OAK_SLAB("WOOD_STEP"),
	OAK_STAIRS("WOOD_STAIRS"),
	OAK_TRAPDOOR("TRAP_DOOR"),
	OAK_WOOD("LOG"),
	OBSERVER("OBSERVER"),
	OBSIDIAN("OBSIDIAN"),
	OCELOT_SPAWN_EGG("MONSTER_EGG", 98),
	ORANGE_BANNER("BANNER", 14),
	ORANGE_BED("BED", 1),
	ORANGE_CARPET("CARPET", 1),
	ORANGE_CONCRETE("CONCRETE", 1),
	ORANGE_CONCRETE_POWDER("CONCRETE_POWDER", 1),
	ORANGE_DYE("INK_SACK", 14),
	ORANGE_GLAZED_TERRACOTTA("ORANGE_GLAZED_TERRACOTTA"),
	ORANGE_SHULKER_BOX("ORANGE_SHULKER_BOX"),
	ORANGE_STAINED_GLASS("STAINED_GLASS", 1),
	ORANGE_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 1),
	ORANGE_TERRACOTTA("STAINED_CLAY", 1),
	ORANGE_TULIP("RED_ROSE", 5),
	ORANGE_WALL_BANNER("WALL_BANNER"),
	ORANGE_WOOL("WOOL", 1),
	OXEYE_DAISY("RED_ROSE", 8),
	PACKED_ICE("PACKED_ICE"),
	PAINTING("PAINTING"),
	PAPER("PAPER"),
	PARROT_SPAWN_EGG("MONSTER_EGG"),
	PEONY("DOUBLE_PLANT", 5),
	PETRIFIED_OAK_SLAB("STONE"),
	PHANTOM_MEMBRANE("STONE"),
	PHANTOM_SPAWN_EGG("MONSTER_EGG"),
	PIG_SPAWN_EGG("MONSTER_EGG", 90),
	PINK_BANNER("BANNER", 9),
	PINK_BED("BED", 6),
	PINK_CARPET("CARPET", 6),
	PINK_CONCRETE("CONCRETE", 6),
	PINK_CONCRETE_POWDER("CONCRETE_POWDER", 6),
	PINK_DYE("INK_SACK", 9),
	PINK_GLAZED_TERRACOTTA("PINK_GLAZED_TERRACOTTA"),
	PINK_SHULKER_BOX("PINK_SHULKER_BOX"),
	PINK_STAINED_GLASS("STAINED_GLASS", 6),
	PINK_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 6),
	PINK_TERRACOTTA("STAINED_CLAY", 6),
	PINK_TULIP("RED_ROSE", 7),
	PINK_WALL_BANNER("WALL_BANNER"),
	PINK_WOOL("WOOL", 6),
	PISTON("PISTON_BASE"),
	PISTON_HEAD("PISTON_EXTENSION"),
	PLAYER_HEAD("SKULL_ITEM",3),
	PLAYER_WALL_HEAD("SKULL"),
	PODZOL("DIRT", 2),
	POISONOUS_POTATO("POISONOUS_POTATO"),
	POLAR_BEAR_SPAWN_EGG("MONSTER_EGG", 102),
	POLISHED_ANDESITE("STONE", 6),
	POLISHED_DIORITE("STONE", 4),
	POLISHED_GRANITE("STONE", 2),
	POPPED_CHORUS_FRUIT("CHORUS_FRUIT_POPPED"),
	POPPY("RED_ROSE"),
	PORKCHOP("PORK"),
	POTATO("POTATO"),
	POTATOES("POTATO"),
	POTION("POTION"),
	POTTED_ACACIA_SAPLING("FLOWER_POT"),
	POTTED_ALLIUM("FLOWER_POT"),
	POTTED_AZURE_BLUET("FLOWER_POT"),
	POTTED_BIRCH_SAPLING("FLOWER_POT"),
	POTTED_BLUE_ORCHID("FLOWER_POT"),
	POTTED_BROWN_MUSHROOM("FLOWER_POT"),
	POTTED_CACTUS("FLOWER_POT"),
	POTTED_DANDELION("FLOWER_POT"),
	POTTED_DARK_OAK_SAPLING("FLOWER_POT"),
	POTTED_DEAD_BUSH("FLOWER_POT"),
	POTTED_FERN("FLOWER_POT"),
	POTTED_JUNGLE_SAPLING("FLOWER_POT"),
	POTTED_OAK_SAPLING("FLOWER_POT"),
	POTTED_ORANGE_TULIP("FLOWER_POT"),
	POTTED_OXEYE_DAISY("FLOWER_POT"),
	POTTED_PINK_TULIP("FLOWER_POT"),
	POTTED_POPPY("FLOWER_POT"),
	POTTED_RED_MUSHROOM("FLOWER_POT"),
	POTTED_RED_TULIP("FLOWER_POT"),
	POTTED_SPRUCE_SAPLING("FLOWER_POT"),
	POTTED_WHITE_TULIP("FLOWER_POT"),
	POWERED_RAIL("POWERED_RAIL"),
	PRISMARINE("PRISMARINE"),
	PRISMARINE_BRICKS("PRISMARINE", 1),
	PRISMARINE_BRICK_SLAB("STONE"),
	PRISMARINE_BRICK_STAIRS("STONE"),
	PRISMARINE_CRYSTALS("PRISMARINE_CRYSTALS"),
	PRISMARINE_SHARD("PRISMARINE_SHARD"),
	PRISMARINE_SLAB("STONE"),
	PRISMARINE_STAIRS("STONE"),
	PUFFERFISH("RAW_FISH", 3),
	PUFFERFISH_BUCKET("STONE"),
	PUFFERFISH_SPAWN_EGG("MONSTER_EGG"),
	PUMPKIN("PUMPKIN"),
	PUMPKIN_PIE("PUMPKIN_PIE"),
	PUMPKIN_SEEDS("PUMPKIN_SEEDS"),
	PUMPKIN_STEM("PUMPKIN_STEM"),
	PURPLE_BANNER("BANNER", 5),
	PURPLE_BED("BED", 10),
	PURPLE_CARPET("CARPET", 10),
	PURPLE_CONCRETE("CONCRETE", 10),
	PURPLE_CONCRETE_POWDER("CONCRETE_POWDER", 10),
	PURPLE_DYE("INK_SACK", 5),
	PURPLE_GLAZED_TERRACOTTA("PURPLE_GLAZED_TERRACOTTA"),
	PURPLE_SHULKER_BOX("PURPLE_SHULKER_BOX"),
	PURPLE_STAINED_GLASS("STAINED_GLASS", 10),
	PURPLE_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 10),
	PURPLE_TERRACOTTA("STAINED_CLAY", 10),
	PURPLE_WALL_BANNER("WALL_BANNER"),
	PURPLE_WOOL("WOOL", 10),
	PURPUR_BLOCK("PURPUR_BLOCK"),
	PURPUR_PILLAR("PURPUR_PILLAR"),
	PURPUR_SLAB("PURPUR_SLAB"),
	PURPUR_STAIRS("PURPUR_STAIRS"),
	QUARTZ("QUARTZ"),
	QUARTZ_BLOCK("QUARTZ_BLOCK"),
	QUARTZ_PILLAR("QUARTZ_BLOCK", 2),
	QUARTZ_SLAB("STEP", 7),
	QUARTZ_STAIRS("QUARTZ_STAIRS"),
	RABBIT("RABBIT"),
	RABBIT_FOOT("RABBIT_FOOT", "PORK", 0),
	RABBIT_HIDE("RABBIT_HIDE"),
	RABBIT_SPAWN_EGG("MONSTER_EGG", 101),
	RABBIT_STEW("RABBIT_STEW"),
	RAIL("RAILS"),
	REDSTONE("REDSTONE"),
	REDSTONE_BLOCK("REDSTONE_BLOCK"),
	REDSTONE_LAMP("REDSTONE_LAMP_OFF"),
	REDSTONE_ORE("REDSTONE_ORE"),
	REDSTONE_TORCH("REDSTONE_TORCH_ON"),
	REDSTONE_WALL_TORCH("REDSTONE_TORCH_ON", 1),
	REDSTONE_WIRE("REDSTONE_WIRE"),
	RED_BANNER("BANNER", 1),
	RED_BED("BED", 0),
	RED_CARPET("CARPET", 14),
	RED_CONCRETE("CONCRETE", 14),
	RED_CONCRETE_POWDER("CONCRETE_POWDER", 14),
	RED_GLAZED_TERRACOTTA("RED_GLAZED_TERRACOTTA"),
	RED_MUSHROOM("RED_MUSHROOM"),
	RED_MUSHROOM_BLOCK("RED_MUSHROOM"),
	RED_NETHER_BRICKS("RED_NETHER_BRICK"),
	RED_SAND("SAND", 1),
	RED_SANDSTONE("RED_SANDSTONE"),
	RED_SANDSTONE_SLAB("STONE_SLAB2"),
	RED_SANDSTONE_STAIRS("RED_SANDSTONE_STAIRS"),
	RED_SHULKER_BOX("RED_SHULKER_BOX"),
	RED_STAINED_GLASS("STAINED_GLASS", 14),
	RED_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 14),
	RED_TERRACOTTA("STAINED_CLAY", 14),
	RED_TULIP("RED_ROSE", 4),
	RED_WALL_BANNER("WALL_BANNER"),
	RED_WOOL("WOOL", 14),
	REPEATER("DIODE"),
	REPEATING_COMMAND_BLOCK("COMMAND_REPEATING"),
	ROSE_BUSH("DOUBLE_PLANT", 4),
	RED_DYE("INK_SACK", "ROSE_RED", 1),
	ROSE_RED("INK_SACK", "RED_DYE", 1),
	ROTTEN_FLESH("ROTTEN_FLESH"),
	SADDLE("SADDLE"),
	SALMON("RAW_FISH", 1),
	SALMON_BUCKET("BUCKET"),
	SALMON_SPAWN_EGG("MONSTER_EGG"),
	SAND("SAND"),
	SANDSTONE("SANDSTONE"),
	SANDSTONE_SLAB("STEP", 1),
	SANDSTONE_STAIRS("SANDSTONE_STAIRS"),
	SCUTE("STONE"),
	SEAGRASS("STONE"),
	SEA_LANTERN("SEA_LANTERN"),
	SEA_PICKLE("STONE"),
	SHEARS("SHEARS"),
	SHEEP_SPAWN_EGG("MONSTER_EGG", 91),
	SHIELD("SHIELD"),
	SHULKER_BOX("PURPLE_SHULKER_BOX", "BARRIER", 0),
	SHULKER_SHELL("SHULKER_SHELL"),
	SHULKER_SPAWN_EGG("MONSTER_EGG", 69),
	SIGN("SIGN"),
	SILVERFISH_SPAWN_EGG("MONSTER_EGG", 60),
	SKELETON_HORSE_SPAWN_EGG("MONSTER_EGG"),
	SKELETON_SKULL("SKULL_ITEM"),
	SKELETON_SPAWN_EGG("MONSTER_EGG", 51),
	SKELETON_WALL_SKULL("SKULL"),
	SLIME_BALL("SLIME_BALL"),
	SLIME_BLOCK("SLIME_BLOCK"),
	SLIME_SPAWN_EGG("MONSTER_EGG", 55),
	SMOOTH_QUARTZ("STONE"),
	SMOOTH_RED_SANDSTONE("RED_SANDSTONE", 2),
	SMOOTH_SANDSTONE("SANDSTONE", 2),
	SMOOTH_STONE("STEP"),
	SNOW("SNOW"),
	SNOWBALL("SNOW_BALL"),
	SNOW_BLOCK("SNOW_BLOCK"),
	SOUL_SAND("SOUL_SAND"),
	SPAWNER("MOB_SPAWNER"),
	SPECTRAL_ARROW("SPECTRAL_ARROW", "ARROW", 0),
	SPIDER_EYE("SPIDER_EYE"),
	SPIDER_SPAWN_EGG("MONSTER_EGG", 52),
	SPLASH_POTION("SPLASH_POTION"),
	SPONGE("SPONGE"),
	SPRUCE_BOAT("BOAT_SPRUCE"),
	SPRUCE_BUTTON("WOOD_BUTTON"),
	SPRUCE_DOOR("SPRUCE_DOOR"),
	SPRUCE_FENCE("SPRUCE_FENCE"),
	SPRUCE_FENCE_GATE("SPRUCE_FENCE_GATE"),
	SPRUCE_LEAVES("LEAVES", 1),
	SPRUCE_LOG("LOG", 1),
	SPRUCE_PLANKS("WOOD", 1),
	SPRUCE_PRESSURE_PLATE("WOOD_PLATE"),
	SPRUCE_SAPLING("SAPLING", 1),
	SPRUCE_SLAB("WOOD_STEP", 1),
	SPRUCE_STAIRS("SPRUCE_WOOD_STAIRS"),
	SPRUCE_TRAPDOOR("TRAP_DOOR"),
	SPRUCE_WOOD("LOG", 1),
	SQUID_SPAWN_EGG("MONSTER_EGG", 94),
	STICK("STICK"),
	STICKY_PISTON("PISTON_STICKY_BASE"),
	STONE("STONE"),
	STONE_AXE("STONE_AXE"),
	STONE_BRICKS("SMOOTH_BRICK"),
	STONE_BRICK_SLAB("STEP", 5),
	STONE_BRICK_STAIRS("SMOOTH_STAIRS"),
	STONE_BUTTON("STONE_BUTTON"),
	STONE_HOE("STONE_HOE"),
	STONE_PICKAXE("STONE_PICKAXE"),
	STONE_PRESSURE_PLATE("STONE_PLATE"),
	STONE_SHOVEL("STONE_SPADE"),
	STONE_SLAB("STEP"),
	STONE_SWORD("STONE_SWORD"),
	STRAY_SPAWN_EGG("MONSTER_EGG"),
	STRING("STRING"),
	STRIPPED_ACACIA_LOG("STONE"),
	STRIPPED_ACACIA_WOOD("STONE"),
	STRIPPED_BIRCH_LOG("STONE"),
	STRIPPED_BIRCH_WOOD("STONE"),
	STRIPPED_DARK_OAK_LOG("STONE"),
	STRIPPED_DARK_OAK_WOOD("STONE"),
	STRIPPED_JUNGLE_LOG("STONE"),
	STRIPPED_JUNGLE_WOOD("STONE"),
	STRIPPED_OAK_LOG("STONE"),
	STRIPPED_OAK_WOOD("STONE"),
	STRIPPED_SPRUCE_LOG("STONE"),
	STRIPPED_SPRUCE_WOOD("STONE"),
	STRUCTURE_BLOCK("STRUCTURE_BLOCK"),
	STRUCTURE_VOID("STRUCTURE_VOID"),
	SUGAR("SUGAR"),
	SUGAR_CANE("SUGAR_CANE", "SUGAR_CANE_BLOCK", 0),
	SUNFLOWER("DOUBLE_PLANT"),
	TALL_GRASS("DOUBLE_PLANT", 2),
	TALL_SEAGRASS("STONE"),
	TERRACOTTA("HARD_CLAY"),
	TIPPED_ARROW("TIPPED_ARROW"),
	TNT("TNT"),
	TNT_MINECART("EXPLOSIVE_MINECART"),
	TORCH("TORCH"),
	TOTEM_OF_UNDYING("TOTEM", "STRING", 0),
	TRAPPED_CHEST("TRAPPED_CHEST"),
	TRIDENT("STONE"),
	TRIPWIRE("TRIPWIRE"),
	TRIPWIRE_HOOK("TRIPWIRE_HOOK"),
	TROPICAL_FISH("RAW_FISH"),
	TROPICAL_FISH_BUCKET("BUCKET"),
	TROPICAL_FISH_SPAWN_EGG("MONSTER_EGG"),
	TUBE_CORAL("STONE"),
	TUBE_CORAL_BLOCK("STONE"),
	TUBE_CORAL_FAN("STONE"),
	TURTLE_EGG("MONSTER_EGG"),
	TURTLE_HELMET("STONE"),
	TURTLE_SPAWN_EGG("MONSTER_EGG"),
	VEX_SPAWN_EGG("MONSTER_EGG"),
	VILLAGER_SPAWN_EGG("MONSTER_EGG", 120),
	VINDICATOR_SPAWN_EGG("MONSTER_EGG"),
	VINE("VINE"),
	VOID_AIR("AIR"),
	WALL_SIGN("WALL_SIGN", "OAK_WALL_SIGN", 0),
	WALL_TORCH("TORCH", 1),
	WATER("WATER", "STATIONARY_WATER", 0),
	WATER_BUCKET("WATER_BUCKET"),
	WET_SPONGE("SPONGE", 1),
	WHEAT("CROPS"),
	WHEAT_SEEDS("SEEDS"),
	WHITE_BANNER("BANNER", 15),
	WHITE_BED("BED"),
	WHITE_CARPET("CARPET"),
	WHITE_CONCRETE("CONCRETE"),
	WHITE_CONCRETE_POWDER("CONCRETE_POWDER"),
	WHITE_GLAZED_TERRACOTTA("WHITE_GLAZED_TERRACOTTA"),
	WHITE_SHULKER_BOX("WHITE_SHULKER_BOX"),
	WHITE_STAINED_GLASS("STAINED_GLASS"),
	WHITE_STAINED_GLASS_PANE("STAINED_GLASS_PANE"),
	WHITE_TERRACOTTA("STAINED_CLAY"),
	WHITE_TULIP("RED_ROSE", 6),
	WHITE_WALL_BANNER("WALL_BANNER"),
	WHITE_WOOL("WOOL"),
	WITCH_SPAWN_EGG("MONSTER_EGG", 66),
	WITHER_ROSE("RED_ROSE"),
	WITHER_SKELETON_SKULL("SKULL_ITEM",1),
	WITHER_SKELETON_SPAWN_EGG("MONSTER_EGG"),
	WITHER_SKELETON_WALL_SKULL("SKULL"),
	WOLF_SPAWN_EGG("MONSTER_EGG", 95),
	WOODEN_AXE("WOOD_AXE"),
	WOODEN_HOE("WOOD_HOE"),
	WOODEN_PICKAXE("WOOD_PICKAXE"),
	WOODEN_SHOVEL("WOOD_SPADE"),
	WOODEN_SWORD("WOOD_SWORD"),
	WRITABLE_BOOK("BOOK_AND_QUILL"),
	WRITTEN_BOOK("WRITTEN_BOOK"),
	YELLOW_BANNER("BANNER", 11),
	YELLOW_BED("BED", 4),
	YELLOW_CARPET("CARPET", 4),
	YELLOW_CONCRETE("CONCRETE", 4),
	YELLOW_CONCRETE_POWDER("CONCRETE_POWDER", 4),
	YELLOW_GLAZED_TERRACOTTA("YELLOW_GLAZED_TERRACOTTA"),
	YELLOW_SHULKER_BOX("YELLOW_SHULKER_BOX"),
	YELLOW_STAINED_GLASS("STAINED_GLASS", 4),
	YELLOW_STAINED_GLASS_PANE("STAINED_GLASS_PANE", 4),
	YELLOW_TERRACOTTA("STAINED_CLAY", 4),
	YELLOW_WALL_BANNER("WALL_BANNER"),
	YELLOW_WOOL("WOOL", 4),
	ZOMBIE_HEAD("SKULL_ITEM",2),
	ZOMBIE_HORSE_SPAWN_EGG("MONSTER_EGG"),
	ZOMBIE_PIGMAN_SPAWN_EGG("MONSTER_EGG", 57),
	ZOMBIE_SPAWN_EGG("MONSTER_EGG", 54),
	ZOMBIE_VILLAGER_SPAWN_EGG("MONSTER_EGG"),
	ZOMBIE_WALL_HEAD("SKULL"),
	// Added 15.03.2019
	BRAIN_CORAL_WALL_FAN("STONE"),
	DEAD_BRAIN_CORAL("STONE"),
	DEAD_BRAIN_CORAL_FAN("STONE"),
	DEAD_BRAIN_CORAL_WALL_FAN("STONE"),
	FIRE_CORAL_WALL_FAN("STONE"),
	DEAD_FIRE_CORAL("STONE"),
	DEAD_FIRE_CORAL_FAN("STONE"),
	DEAD_FIRE_CORAL_WALL_FAN("STONE"),
	HORN_CORAL_WALL_FAN("STONE"),
	DEAD_HORN_CORAL("STONE"),
	DEAD_HORN_CORAL_FAN("STONE"),
	DEAD_HORN_CORAL_WALL_FAN("STONE"),
	TUBE_CORAL_WALL_FAN("STONE"),
	DEAD_TUBE_CORAL("STONE"),
	DEAD_TUBE_CORAL_FAN("STONE"),
	DEAD_TUBE_CORAL_WALL_FAN("STONE"),
	BUBBLE_CORAL_WALL_FAN("STONE"),
	DEAD_BUBBLE_CORAL("STONE"),
	DEAD_BUBBLE_CORAL_FAN("STONE"),
	DEAD_BUBBLE_CORAL_WALL_FAN("STONE"),
	// Added 09.05.2019 - MC 1.14
	ACACIA_WALL_SIGN("WALL_SIGN"),
	BIRCH_WALL_SIGN("WALL_SIGN"),
	DARK_OAK_WALL_SIGN("WALL_SIGN"),
	JUNGLE_WALL_SIGN("WALL_SIGN"),
	OAK_WALL_SIGN("WALL_SIGN"),
	SPRUCE_WALL_SIGN("WALL_SIGN"),
	ACACIA_SIGN("SIGN"),
	BIRCH_SIGN("SIGN"),
	DARK_OAK_SIGN("SIGN"),
	JUNGLE_SIGN("SIGN"),
	OAK_SIGN("SIGN"),
	SPRUCE_SIGN("SIGN"),
	ANDESITE_SLAB("COBBLESTONE_SLAB"),
	ANDESITE_STAIRS("COBBLESTONE_STAIRS"),
	ANDESITE_WALL("COBBLESTONE_WALL"),
	BAMBOO("STONE"),
	BAMBOO_SAPLING("OAK_SAPLING", "SAPLING", 0),
	BARREL("CHEST"),
	BELL("FLOWER_POT"),
	BLACK_DYE("INK_SACK", "GRAY_DYE", 8),
	BLAST_FURNACE("FURNACE"),
	BLUE_DYE("INK_SACK", "LIGHT_BLUE_DYE", 12),
	BRICK_WALL("COBBLESTONE_WALL"),
	BROWN_DYE("INK_SACK", "GRAY_DYE", 8),
	GREEN_DYE("INK_SACK", "CACTUS_GREEN", 2),
	CACTUS_GREEN("INK_SACK", "GREEN_DYE", 2),
	CAMPFIRE("FIRE"),
	CARTOGRAPHY_TABLE("MAP"),
	CAT_SPAWN_EGG("OCELOT_SPAWN_EGG", "MONSTER_EGG", 98),
	COMPOSTER("STONE"),
	CORNFLOWER("YELLOW_FLOWER", "DANDELION", 0),
	CREEPER_BANNER_PATTERN("STONE"),
	CROSSBOW("BOW"),
	CUT_RED_SANDSTONE_SLAB("STEP", "STONE_SLAB", 0),
	CUT_SANDSTONE_SLAB("STEP", "STONE_SLAB", 0),
	DIORITE_SLAB("STEP", "STONE_SLAB", 0),
	DIORITE_STAIRS("COBBLESTONE_STAIRS", 0),
	DIORITE_WALL("COBBLESTONE_WALL"),
	SKULL_BANNER_PATTERN("STONE"),
	SUSPICIOUS_STEW("MUSHROOM_SOUP"),
	SWEET_BERRIES("SWEET_BERRIES"),
	LEATHER_HORSE_ARMOR("IRON_BARDING", "IRON_HORSE_ARMOR", 0),
	RAVAGER_SPAWN_EGG("MONSTER_EGG", "SHEEP_SPAWN_EGG", 0),
	PILLAGER_SPAWN_EGG("MONSTER_EGG", "SHEEP_SPAWN_EGG", 0);

	// Safety compatibility check
	public static boolean COMPATIBLE = true;

	// Holds history of last called translated names, for performance.
	private static HashMap<String, CompMaterial> cachedSearch = new HashMap<>();

	/**
	 * The name of the material in Minecraft 1.12 and older (may or may not be the
	 * same).
	 *
	 * Returns the closest alternative in case such material was non-existing in
	 * that old version.
	 */
	@Getter
	private final String legacyName;

	/**
	 * Returns the correct Material representation for your MC version.
	 */
	@Getter
	private final Material material;

	/**
	 * Holds data value for legacy material name.
	 *
	 * For Minecraft 1.12 and older, some materials could only be obtained by their
	 * data value (for example WOOL with data value 4 represents YELLOW_WOOL in
	 * 1.13+).
	 *
	 * @deprecated removed in MC 1.13+
	 */
	@Deprecated
	@Getter
	private final int data;

	/**
	 * Alternative name for the item, used for materials that were removed i.e.
	 * BURNING_FURNACE
	 */
	private final String alternativeName;

	/**
	 * Construct new legacy material
	 *
	 * @param legacyName
	 */
	private CompMaterial(final String legacyName) {
		this(legacyName, null, 0);
	}

	/**
	 * Construct new legacy material
	 *
	 * @param legacyName
	 * @param data
	 */
	private CompMaterial(final String legacyName, final int data) {
		this(legacyName, null, data);
	}

	/**
	 * Construct new legacy material
	 *
	 * @param legacyName
	 * @param alternativeName alternative name or null if none
	 * @param data
	 */
	private CompMaterial(final String legacyName, final String alternativeName, final int data) {
		this.legacyName = legacyName;
		this.alternativeName = alternativeName;
		this.data = data;
		this.material = findName();
	}

	// Handles Minecraft below 1.12 and replaces non-existing Materials to STONE.
	private Material findName() {
		final String[] names = { name(), legacyName, alternativeName, "STONE" };

		for (final String legacy : names)
			if (legacy != null)
				try {
					return Material.valueOf(legacy);
				} catch (final IllegalArgumentException ex) {
				}

		throw new FoException("[REPORT] CompMaterial could not parse " + this + ". Tried: " + String.join(", ", names));
	}

	/**
	 * Convenience method for giving 1 piece of this material into a players inventory
	 *
	 * @param player
	 */
	public final void give(final Player player) {
		give(player, 1);
	}

	/**
	 * Convenience method for giving this material into a players inventory
	 *
	 * @param player
	 * @param amount
	 */
	public final void give(final Player player, final int amount) {
		player.getInventory().addItem(toItem(amount));
	}

	/**
	 * Construct an {@link ItemStack} from this material (with corresponding data
	 * value if necessary).
	 *
	 * @param amount the amount
	 * @return the itemstack
	 */
	public final ItemStack toItem() {
		return toItem(1);
	}

	/**
	 * Construct an {@link ItemStack} from this material (with corresponding data
	 * value if necessary) at a given amount.
	 *
	 * @param amount the amount
	 * @return the itemstack
	 */
	public final ItemStack toItem(final int amount) {
		final Material mat = toMaterial();

		return MinecraftVersion.atLeast(V.v1_13) ? new ItemStack(mat, amount) : new ItemStack(mat, amount, (byte) data);
	}

	/**
	 * Returns the {@link Material} representation of our material.
	 *
	 * @return the material
	 */
	private final Material toMaterial() {
		final Material mat = Material.matchMaterial(toString());
		final Material altMat = alternativeName != null ? Material.matchMaterial(alternativeName) : null;
		final Material legacyMat = legacyName != null ? Material.matchMaterial(legacyName) : null;

		return mat != null ? mat : (altMat != null ? altMat : legacyMat);
	}

	/**
	 * Return true if the {@link #getMaterial()} and the given Material matches.
	 *
	 * NOT cross-version compatible. For this, use {@link #is(ItemStack)}
	 *
	 * @param comp
	 * @return
	 */
	public final boolean is(final Material mat) {
		return material == mat;
	}

	/**
	 * Evaluates whether a given {@link ItemStack} is equal material-wise. Takes
	 * data value in account if we are on Minecraft 1.13+ or older.
	 *
	 * @param comp the itemstack
	 * @return -see above-
	 */
	public final boolean is(final ItemStack comp) {
		return is(comp.getType(), comp.getData().getData());
	}

	/**
	 * Evaluates whether the given block equals this material
	 *
	 * @param block
	 * @return
	 */
	public final boolean is(final Block block) {
		return block == null ? false : is(block.getType(), block.getData());
	}

	/**
	 * Evaluates whether the given type/data equals this material
	 *
	 * @param type
	 * @param data
	 * @return
	 */
	public final boolean is(Material type, int data) {
		if (MinecraftVersion.atLeast(V.v1_13))
			return type == toMaterial();

		if (type == toMaterial() && data == this.data)
			return true;

		final CompMaterial compMat = fromMaterial(type);

		if (isDamageable(compMat) && toMaterial() == type)
			return true;

		return false;
	}

	/**
	 * Returns true for damageable materials.
	 *
	 * @param type
	 * @return
	 */
	public final boolean isDamageable() {
		return isDamageable(this);
	}

	/**
	 * Returns true if the given material is damageable.
	 *
	 * @param type
	 * @return
	 */
	public static final boolean isDamageable(final CompMaterial type) {
		switch (type.toString()) {
			case "HELMET":
				return true;
			case "CHESTPLATE":
				return true;
			case "LEGGINGS":
				return true;
			case "BOOTS":
				return true;
			case "SWORD":
				return true;
			case "AXE":
				return true;
			case "PICKAXE":
				return true;
			case "SHOVEL":
				return true;
			case "HOE":
				return true;
			case "ELYTRA":
				return true;
			case "TURTLE_HELMET":
				return true;
			case "TRIDENT":
				return true;
			case "HORSE_ARMOR":
				return true;
			case "SHEARS":
				return true;
			default:
				return false;
		}
	}

	/**
	 * Return true if the given block is air
	 *
	 * @param block
	 * @return
	 */
	public static final boolean isAir(final Block block) {
		return block == null || isAir(block.getType());
	}

	/**
	 * Returns if the given material is air
	 *
	 * @param material
	 * @return
	 */
	public static final boolean isAir(final Material material) {
		return material == null || nameEquals(material, "AIR", "CAVE_AIR", "VOID_AIR");
	}

	/**
	 * Returns true if the given material is a horse armor (prev. named barding).
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isHorseArmor(final Material mat) {
		return nameEquals(mat, "BARDING", "HORSE_ARMOR");
	}

	/**
	 * Returns true if the given material is a carpet (any variation).
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isCarpet(final Material mat) {
		return nameContains(mat, "CARPET");
	}

	/**
	 * Return true if the given material is leaves (any variation)
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isLeaves(final Material mat) {
		return mat.toString().endsWith("_LEAVES") || nameEquals(mat, "LEAVES", "LEAVES_2");
	}

	/**
	 * Returns true if the given material is a hard clay (any variations), later
	 * named terracotta.
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isHardClay(final Material mat) {
		return nameContains(mat, "STAINED_CLAY", "HARD_CLAY", "TERRACOTTA");
	}

	/**
	 * Returns true if the given material is a leash for horses.
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isLeash(final Material mat) {
		return nameEquals(mat, "LEASH", "LEAD");
	}

	/**
	 * Returns true if the given material is either gold or iron pressure plate.
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isHeavyPressurePlate(final Material mat) {
		return nameContains(mat, "IRON_PLATE", "GOLD_PLATE", "WEIGHTED_PRESSURE_PLATE");
	}

	/**
	 * Return true for all kinds of wood pressure plates
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isWoodPressurePlate(final Material mat) {
		return nameEquals(mat, "WOOD_PLATE", "ACACIA_PRESSURE_PLATE", "BIRCH_PRESSURE_PLATE", "DARK_OAK_PRESSURE_PLATE",
				"JUNGLE_PRESSURE_PLATE", "OAK_PRESSURE_PLATE", "SPRUCE_PRESSURE_PLATE");
	}

	/**
	 * Returns true if the given material is a firework.
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isFirework(final Material mat) {
		return nameContains(mat, "FIREWORK");
	}

	/**
	 * Returns true if the given material is log (any variation).
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isLog(final Material mat) {
		return nameEquals(mat, "LOG", "LOG_2") || mat.toString().endsWith("_LOG");
	}

	/**
	 * Returns true if the given material is a bloat (that's right) (any variation).
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isBoat(final Material mat) {
		return nameContains(mat, "BOAT");
	}

	/**
	 * Returns true if the given material is a wood button (any variation).
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isWoodButton(final Material mat) {
		final String n = mat.toString();

		return n.endsWith("_BUTTON") && !n.equals("STONE_BUTTON");
	}

	/**
	 * Returns true if the given material is a redstone lamp (any state).
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isRedstoneLamp(final Material mat) {
		return nameContains(mat, "REDSTONE_LAMP");
	}

	/**
	 * Returns true if the given material is a monster egg.
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isMonsterEgg(final Material mat) {
		return nameContains(mat, "MONSTER_EGG", "_SPAWN_EGG");
	}

	/**
	 * Returns true if the given material is a tree sapling (not potted).
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isSapling(final Material mat) {
		return nameContains(mat, "SAPLING") && !mat.toString().startsWith("POTTED");
	}

	/**
	 * Returns true if the given material is a wall sign (any variation).
	 *
	 * @param mat the material
	 * @return
	 */
	public static final boolean isWallSign(final Material mat) {
		return nameContains(mat, "WALL_SIGN");
	}

	/**
	 * Returns true if the given material is a dead shrub or a grass.
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isLongGrass(final Material mat) {
		return nameEquals(mat, "LONG_GRASS", "TALL_GRASS", "FERN", "DEAD_BUSH") && !mat.toString().startsWith("POTTED");
	}

	/**
	 * Returns true if the given material is normally 2 blocks tall when placed.
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isDoublePlant(final Material mat) {
		return nameEquals(mat, "DOUBLE_PLANT", "SUNFLOWER", "LILAC", "TALL_GRASS", "LARGE_FERN", "ROSE_BUSH", "PEONY", "TALL_SEAGRASS");
	}

	/**
	 * Returns true if the given material is a skull.
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isSkull(final CompMaterial mat) {
		return isSkull(mat.getMaterial());
	}

	/**
	 * Returns true if the given material is a skull.
	 *
	 * @param mat
	 * @return
	 */
	public static final boolean isSkull(final Material mat) {
		final String name = mat.toString();

		return (name.endsWith("_HEAD") || name.endsWith("_SKULL")) && !name.contains("WALL");
	}

	/**
	 * Returns true if the given material is a trap door (any variation).
	 *
	 * @param mat
	 * @return
	 */
	public static boolean isTrapDoor(final Material mat) {
		final String name = mat.toString();

		return name.contains("TRAP_DOOR") || name.contains("TRAPDOOR");
	}

	// Utility method for evaluating matches.
	private static final boolean nameContains(final Material mat, final String... names) {
		final String matName = mat.toString();

		for (final String name : names)
			if (matName.contains(name))
				return true;

		return false;
	}

	// Utility method for evaluating matches.
	private static final boolean nameEquals(final Material mat, final String... names) {
		final String matName = mat.toString();

		for (final String name : names)
			if (matName.equals(name))
				return true;

		return false;
	}

	/**
	 * Create a wool from the given data type and amount.
	 *
	 * @param color
	 * @param amount
	 * @return
	 */
	public static ItemStack makeWool(final byte color, final int amount) {
		return makeWool(CompColor.fromWoolData(color), amount);
	}

	/**
	 * Create a wool from dye of certain amount.
	 *
	 * @param color
	 * @param amount
	 * @return
	 */
	public static ItemStack makeWool(final CompColor color, final int amount) {
		if (MinecraftVersion.atLeast(V.v1_13))
			return new ItemStack(Material.valueOf(color.getDye() + "_WOOL"), amount);

		else
			return new ItemStack(Material.valueOf("WOOL"), amount, color.getDye().getWoolData());
	}

	/**
	 * Attempts to convert an {@link EntityType} into a valid {@link CompMaterial}
	 * representing a spawnable Monster Egg.
	 *
	 * In case the entity given is not a valid entity or does not have an egg, we
	 * return Sheep Monster Egg instead.
	 *
	 * @param type
	 * @return the corresponding egg, or Sheep Monster Egg if does not exist
	 */
	public static CompMaterial makeMonsterEgg(final EntityType type) {
		if (!COMPATIBLE)
			return null;

		String name = type.toString() + "_SPAWN_EGG";

		// Special cases
		if (type == EntityType.PIG_ZOMBIE)
			name = "ZOMBIE_PIGMAN_SPAWN_EGG";
		else if (type == EntityType.MUSHROOM_COW)
			name = "MOOSHROOM_SPAWN_EGG";

		// Parse normally, backwards compatible
		final CompMaterial mat = fromString(name);

		// Return the egg or sheep egg if does not exist
		return Common.getOrDefault(mat, CompMaterial.SHEEP_SPAWN_EGG);
	}

	/**
	 * Reverts back the 1.13+ spawn egg material to {@link EntityType}
	 *
	 * @param monsterEgg the monster egg
	 * @return the egg, or null if does not exist in the current MC version
	 */
	public static EntityType makeEntityType(final CompMaterial monsterEgg) {
		Valid.checkBoolean(monsterEgg.toString().endsWith("_SPAWN_EGG"), "Material " + monsterEgg + " is not a valid monster egg! (Must end with _SPAWN_EGG)");

		final String name = monsterEgg.toString().replace("_SPAWN_EGG", "");

		// Special cases
		if (name == "ZOMBIE_PIGMAN_SPAWN_EGG")
			return EntityType.PIG_ZOMBIE;

		else if (name == "MOOSHROOM_SPAWN_EGG")
			return EntityType.MUSHROOM_COW;

		else
			// Parse normally, backwards compatible
			try {
				return EntityType.valueOf(name);
			} catch (final IllegalArgumentException ex) {
				// Does not exist for the current MC version
			}

		return null;
	}

	/**
	 * Return a {@link CompMaterial} from the given block, also comparing the data value
	 *
	 * @param block
	 * @return
	 */
	public static final CompMaterial fromBlock(final Block block) {
		try {
			return CompMaterial.valueOf(block.getType().toString());

		} catch (final IllegalArgumentException e) {
			for (final CompMaterial compMat : CompMaterial.values())
				if (compMat.legacyName.equals(block.getType().toString()) && compMat.getData() == block.getData())
					return compMat;
		}
		return null;
	}

	/**
	 * Creates {@link CompMaterial} class from a given {@link Material}.
	 *
	 * @param mat
	 * @return
	 */
	public static final CompMaterial fromMaterial(final Material mat) {
		try {
			return CompMaterial.valueOf(mat.toString());

		} catch (final IllegalArgumentException e) {
			for (final CompMaterial compMat : CompMaterial.values())
				if (compMat.legacyName.equals(mat.toString()))
					return compMat;
		}
		return null;
	}

	/**
	 * See {@link #fromString(String)}, with the addition that
	 * this method throws an error if the string could not be parsed
	 *
	 * @param key
	 * @return
	 */
	public static CompMaterial fromStringStrict(final String key) {
		final CompMaterial material = fromString(key);

		Valid.checkNotNull(material, "Invalid material '" + key + "'! For valid names, see: https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/Material.html (Note that names change across MC versions!)");
		return material;
	}

	/**
	 *
	 * A special method for some of our plugins that by default include
	 * materials in their config files that do not exist in older MC versions.
	 *
	 * For these materials, we simply return null and do not add them to settings
	 * instead of throwing an error.
	 *
	 * @deprecated special usage only
	 * @param name
	 * @return
	 */
	@Deprecated
	public static CompMaterial fromStringCompat(final String name) {
		final CompMaterial lookup = CompMaterial.fromString(name);

		if (lookup == null && SoftMaterials.MATERIALS.contains(name))
			return null;

		return CompMaterial.fromStringStrict(name);
	}

	/**
	 * Creates {@link CompMaterial} class from a given String. The string may
	 * contain a colon ":" and a data value after it, we will find then call
	 * {@link #fromLegacy(String, byte)} and return the proper Material.
	 *
	 * @param key
	 * @return
	 */
	public static CompMaterial fromString(String key) {
		// try to resolve common pitfalls and emulate the material enum writing style
		key = key.replace(" ", "_").toUpperCase();

		try {
			return CompMaterial.valueOf(key);

		} catch (final IllegalArgumentException e) {
			CompMaterial legacy = null;
			final String[] split = key.split(":");

			if (split.length == 1)
				legacy = fromLegacy(key, (byte) 0);
			else
				legacy = fromLegacy(split[0], (byte) Integer.parseInt(split[1]));

			return legacy;
		}
	}

	/**
	 * Constructs the {@link CompMaterial} class with a given name and a data value.
	 *
	 * @param name
	 * @param data
	 * @return
	 */
	public static CompMaterial fromLegacy(String name, final int data) {
		// try to resolve common pitfalls and emulate the material enum writing style
		name = name.replace(" ", "_").toUpperCase();

		if (cachedSearch.containsKey(name + "," + data))
			return cachedSearch.get(name + "," + data);

		// First search to directly match legacy name
		for (final CompMaterial mat : CompMaterial.values())
			if (name.equals(mat.legacyName) && mat.data == data) {
				cachedSearch.put(mat.legacyName + "," + data, mat);

				return mat;
			}

			else if (mat.alternativeName != null && mat.alternativeName.equals(name)) {
				cachedSearch.put(mat.alternativeName + "," + data, mat);

				return mat;
			}

		// What if we call a modern name but still want to assert data value?
		// No problem, just parse it and search with the legacy name again.
		try {
			final CompMaterial modern = valueOf(name);

			if (modern.legacyName == name)
				return null;

			return fromLegacy(modern.legacyName, data);

		} catch (final IllegalArgumentException ex) {
		}

		return null;
	}

	/**
	 * Attempts to parse a Material from a given ID and data
	 *
	 * @param id
	 * @return
	 */
	public static Material fromId(final int id) {
		for (final Material mat : Material.values())
			if (MinecraftVersion.atLeast(V.v1_13)) {
				if (mat.toString().startsWith("LEGACY_") && mat.getId() == id)
					return mat;
			} else if (mat.getId() == id)
				return mat;

		throw new FoException("Unable to resolve Material ID " + id);
	}
}

/**
 * A special class for some of our plugins that by default include
 * materials in their config files that do not exist in older MC versions.
 *
 * For these materials, we simply return null and do not add them to settings
 * instead of throwing an error.
 *
 * @deprecated special usage only, limited
 */
@Deprecated
class SoftMaterials {

	final static StrictSet<String> MATERIALS = new StrictSet<>(Sets.newHashSet(
			"SKULL",
			"ANVIL",
			"TRAPPED_CHEST",
			"GOLD_PLATE",
			"IRON_PLATE",
			"REDSTONE_COMPARATOR_OFF",
			"REDSTONE_COMPARATOR_ON",
			"DAYLIGHT_DETECTOR",
			"REDSTONE_BLOCK",
			"QUARTZ_ORE",
			"HOPPER",
			"QUARTZ_BLOCK",
			"QUARTZ_STAIRS",
			"ACTIVATOR_RAIL",
			"DROPPER",
			"STAINED_CLAY",
			"STAINED_GLASS_PANE",
			"LEAVES_2",
			"LOG_2",
			"ACACIA_STAIRS",
			"DARK_OAK_STAIRS",
			"SLIME_BLOCK",
			"BARRIER",
			"IRON_TRAPDOOR",
			"PRISMARINE",
			"SEA_LANTERN",
			"HAY_BLOCK",
			"CARPET",
			"HARD_CLAY",
			"COAL_BLOCK",
			"PACKED_ICE",
			"DOUBLE_PLANT",
			"STANDING_BANNER",
			"WALL_BANNER",
			"DAYLIGHT_DETECTOR_INVERTED",
			"RED_SANDSTONE",
			"RED_SANDSTONE_STAIRS",
			"DOUBLE_STONE_SLAB2",
			"STONE_SLAB2",
			"SPRUCE_FENCE_GATE",
			"BIRCH_FENCE_GATE",
			"JUNGLE_FENCE_GATE",
			"DARK_OAK_FENCE_GATE",
			"ACACIA_FENCE_GATE",
			"SPRUCE_FENCE",
			"BIRCH_FENCE",
			"JUNGLE_FENCE",
			"DARK_OAK_FENCE",
			"ACACIA_FENCE",
			"SPRUCE_DOOR",
			"BIRCH_DOOR",
			"JUNGLE_DOOR",
			"ACACIA_DOOR",
			"DARK_OAK_DOOR",
			"END_ROD",
			"CHORUS_PLANT",
			"CHORUS_FLOWER",
			"PURPUR_BLOCK",
			"PURPUR_PILLAR",
			"PURPUR_STAIRS",
			"PURPUR_DOUBLE_SLAB",
			"PURPUR_SLAB",
			"END_BRICKS",
			"GRASS_PATH",
			"END_GATEWAY",
			"FROSTED_ICE",
			"MAGMA",
			"NETHER_WART_BLOCK",
			"RED_NETHER_BRICK",
			"BONE_BLOCK",
			"OBSERVER",
			"PURPLE_SHULKER_BOX"

	));
}